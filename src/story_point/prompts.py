from langchain.prompts import PromptTemplate

story_point_estimation_prompt = PromptTemplate(
    input_variables=["story", "reference_stories"],
    template="""
당신은 숙련된 스크럼 마스터입니다.

다음 스토리의 스토리 포인트를 추정해야 합니다. 참고 스토리들이 있는 경우 상대적 추정을, 없는 경우 절대적 추정을 수행하세요.

## 스토리 포인트 추정 기준
- **1 포인트**: 매우 간단한 작업 (1-2시간)
  - 단순 설정 변경, 텍스트 수정, 기존 기능 복사
- **2 포인트**: 간단한 작업 (반나절)
  - 간단한 CRUD 작업, 기존 컴포넌트 재사용
- **3 포인트**: 보통 작업 (1일)
  - 새로운 화면 개발, 중간 복잡도의 비즈니스 로직
- **5 포인트**: 복잡한 작업 (2-3일)
  - 복잡한 비즈니스 로직, 외부 시스템 연동
- **8 포인트**: 매우 복잡한 작업 (1주일)
  - 아키텍처 변경, 대규모 리팩토링, 신규 기술 도입

## 추정할 스토리:
{story}

## 같은 영역(area)의 참고 스토리들:
{reference_stories}

## 전체 영역의 참고 스토리들 (같은 영역 스토리가 없는 경우 활용):
{all_reference_stories}

## 추정 프로세스

### 1단계: 참고 스토리 분석
- 같은 영역의 참고 스토리가 있는 경우: **직접 비교**
- 같은 영역의 참고 스토리가 없는 경우: **다른 영역 스토리 활용**

### 2단계: 복잡도 분석
다음 요소들을 종합적으로 평가하세요:

**기술적 복잡도**
- 구현 난이도 (새로운 기술/라이브러리 사용 여부)
- 코드 변경 범위 (신규 개발 vs 기존 수정)
- 테스트 복잡도

**비즈니스 복잡도**
- 요구사항 명확성
- 비즈니스 로직 복잡도
- 사용자 인터페이스 복잡도

**위험 요소**
- 불확실성 (요구사항 변경 가능성)
- 의존성 (다른 팀/시스템과의 의존도)
- 학습 곡선 (새로운 기술/도메인 학습 필요)

### 3단계: 추정 방법 선택

**직접 비교 (같은 영역 스토리가 있는 경우)**
1. 같은 영역의 참고 스토리들과 복잡도 비교
2. 가장 유사한 스토리 식별
3. 상대적 차이를 고려하여 포인트 조정

**다른 영역 스토리 활용 (같은 영역 스토리가 없는 경우)**
1. 모든 영역의 스토리 중 유사한 복잡도 패턴 찾기
2. 영역 차이를 고려한 복잡도 보정
3. 기술적/비즈니스적 유사성이 높은 스토리 우선 참조

### 4단계: 최종 포인트 결정
- 반드시 피보나치 수열 값(1, 2, 3, 5, 8) 중 선택
- 애매한 경우 더 높은 포인트 선택 (안전 마진)

## 출력 포맷 (JSON)

{{
  "estimated_point": 3,
  "estimation_method": "same_area|cross_area",
  "reasoning": "상세한 추정 근거 (200자 이내)",
  "complexity_factors": [
    "기술적 복잡도 요소",
    "비즈니스 복잡도 요소",
    "위험 요소"
  ],
  "similar_stories": [
    "유사한 참고 스토리 제목들 (영역 구분 없이)"
  ],
  "confidence_level": "high|medium|low",
  "assumptions": [
    "추정 시 가정한 사항들"
  ]
}}

## 중요사항
- **반드시 유효한 JSON 형식으로만 응답**
- **JSON 외 다른 설명이나 주석 금지**
- **estimated_point는 반드시 1, 2, 3, 5, 8 중 하나**
- **같은 영역 스토리가 없어도 반드시 포인트 산정**
- **다른 영역 스토리라도 적극 활용하여 상대적 추정 수행**
- **불확실한 경우 보수적으로 추정 (더 높은 포인트)**

결과:
"""
)